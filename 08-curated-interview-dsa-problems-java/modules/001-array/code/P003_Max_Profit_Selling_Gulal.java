/**
 *  Maximize profit by selling Gulal
 *  -   It is Holi in Ninja Land. While everyone here is busy texting "Happy Holi" 
 *      wishes to each other, NinjaCoder has some other plans and wants to earn 
 *      some money this season.
 *  -   Now, the Apex court has allowed the sale of only herbal colors. Out of 
 *      all herbal colors, "Gulal" is the most popular. Because of the irregular 
 *      supply of "Gulal" due to such large demand, the price of "Gulal" is 
 *      fluctuating daily. NinjaCoder saw a business opportunity in this. He/She 
 *      got a price list for coming N days from an insider in the market union. 
 *      Prices in the list are for 1 unit of a large packet of "Gulal". Each 
 *      large packet contains 100 units of Gulal.
 *  -   Now, due to financial limitations, NinjaCoder can transact only 1 large
 *      packet (100 units of "Gulal") in the market. You have to tell maximum 
 *      profit possible, given that he/she can transact atmost one time.
 *  
 *  Note: 
 *      1. Transaction refers to the act of buying and selling.
 *      2. "Gulal" cannot be sold individually. NinjaCoder has to buy/sell the 
 *          entire packet. 
 *  
 *  Input Format
 *  -   The first line of input contains an integer N, denoting the number of days.
 *  -   The second line of input contains N single space-separated integers 
 *      denoting the price of "Gulal".
 *  
 *  Constraints
 *      1 <= N <= 10000
 *      50 <= A(i) <= 100
 *  
 *  Output Format
 *      Print the maximum profit that can be generated by NinjaCoder.
 *  
 *  Sample Input 1:
 *      7
 *      62 63 70 66 64 68 61
 *  Sample Output 1:
 *      8
 * 
 *  Sample Input 2:
 *      7
 *      98 61 56 55 53 70 96
 *  Sample Output 2:
 *      43
 * 
 *  Sample Input 3:
 *      7
 *      71 74 64 58 77 83 96 
 *  Sample Output 3:
 *      38
 * 
 *  Sample Input 4:
 *      7
 *      68 82 60 65 86 92 64 
 *  Sample Output 4:
 *      32
 * 
 *  Sample Input 5:
 *      7
 *      62 55 66 51 88 85 99 
 *  Sample Output 1:
 *      48
 *  
 */
import java.util.Scanner;

public class P003_Max_Profit_Selling_Gulal {
    // O(n) solution
    private static int maxProfitBySellingGulal(int[] arr){
        int minTillNow = Integer.MAX_VALUE, maxTillNow = Integer.MIN_VALUE;
        int minIdx = 0, maxIdx = 0, maxProfit = 0;
        for(int i=0; i<arr.length; i++){
            if(arr[i] < minTillNow){
                minTillNow = arr[i];
                minIdx = i;
            } 
            if (arr[i] > maxTillNow || minIdx > maxIdx){
                maxTillNow = arr[i];
                maxIdx = i;
            }
            if(maxTillNow-minTillNow > maxProfit){
                maxProfit = maxTillNow-minTillNow;
            }
        }
        return maxProfit;
    }

    // Another way
    private static int maxProfitBySellingGulal2(int[] arr){
        int indexOfMin = 0;
        int maxProfitTillNow = 0;
        int i=1;
        while(i < arr.length){
            if(arr[i] < arr[indexOfMin]){
                indexOfMin = i;
            }
            int cp = arr[i] - arr[indexOfMin];
            if(cp > maxProfitTillNow){
                maxProfitTillNow = cp;
            }
            i++;
        }
        return maxProfitTillNow;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = sc.nextInt();
        }
        int maxProfit = maxProfitBySellingGulal(arr);
        System.out.println(maxProfit);

        int maxProfit2 = maxProfitBySellingGulal2(arr);
        System.out.println(maxProfit2);
        sc.close();
    }
}